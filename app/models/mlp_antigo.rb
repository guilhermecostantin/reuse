class Mlp < ActiveRecord::Base
  attr_accessible :entrada1, :entrada2, :entrada3, :entrada4, :target1, :target2, :target3

  def sigmoidal x
  	1/(1 + Math.exp(-x))
  end

  def sigmoidal_der x
  	result = sigmoidal x
  	result*(1-result)
  end

	def teste
		puts "oi"
	end

	def treina
		condicao = true
		alfa = 0.1
		tolerancia = 0.05
		precisao = 10**-6
		cam_int = 15
		cam_ent = 4
		cam_final = 3
		epoca = 0

		while epoca<1000
			entradas.each_with_index do |entrada, i|
				calcula cam_ent, cam_int, cam_final, entrada, i
				epoca+=1
				condicao = calcula_erro
			end
		end
		
		puts epoca


	end

	def calcula_erro
		erro_medio = 0

	end

	def propagacao cam_ent, cam_int, cam_final, v, w
		z_e = Array.new
		z = Array.new
		y_e = Array.new
		y = Array.new
		entrada = entradas.first
		#calculo do Z
		cam_int.times do |j| # para cada neuronio da camada intermediaria
			z_e[j] = v[0][j] 
			cam_ent.times do |i| #para cada neuronio da camada inicial
				z_e[j] += entrada[i]*v[i+1][j]
			end
			z[j] = sigmoidal z_e[j]
		end

		#calculo do Y
		cam_final.times do |k|  # para cada neuronio da camada final
			y_e[k] = w[0][k]
			cam_int.times do |j| # para cada neuronio da camada intermediaria
				y_e[k] += z[j] * w[j+1][k]
			end
			y[k] = sigmoidal y_e[k]
		end

		return z_e, z, y, y_e
	end


	def retropropagacao z_e, z, y, y_e, cam_ent, cam_int, cam_final, par
		require 'matrix'
		w = pesos_segunda_camada
		delta_w = pesos_segunda_camada
		v = pesos_primeira_camada
		delta_v = pesos_primeira_camada
		delta_j = []
		delta_e = []
		deltaK = Array.new
		target = saidas
		alfa = 0.1
		x = entradas

		cam_final.times do |k|
			deltaK[k] = (target[par][k] - y[k]) * sigmoidal_der(y_e[k])
			delta_w[0][k] = deltaK * alfa
			cam_int.times do |j|
				delta_w[j+1][k] = alfa * deltaK[k] * z[j]
			end
		end

		cam_int.times do |j|
		    delta_e[j] = 0
		    cam_final.times do |k|
				delta_e[j] += deltaK[k]*w[j+1][k];
			end

	        delta_j[j] = delta_e[j] * sigmoidal_der(z_e[j]);
	        
			delta_v[0][j] = alfa * delta_j[j];
	        cam_ent.times do |i|
	            delta_v[i+1][j] = alfa * delta_j[j] * x[par][i];
	        end
	    end

	    #atualizacao dos pesos w

	    cam_int.times do |j|
	    	cam_final.times do |k|
	    		w[j][k] += delta_w[j][k]
	    	end
	    end

	    #atualizacao dos pesos v

	    cam_ent.times do |i|
	    	cam_int.times do |j|
	    		v[i][j] += delta_v[i][j]
	    	end
	    end

	    return v, w
	end

	def teste
		cam_int = 15
		cam_ent = 4
		cam_final = 3
		z_e, z, y, y_e = propagacao(cam_ent, cam_int, cam_final, pesos_primeira_camada, pesos_segunda_camada)
		v, w = retropropagacao(z_e, z, y, y_e, cam_ent, cam_int, cam_final, 1)

	end


	def calcula cam_ent, cam_int, cam_final, entrada, par

	z_e, z, y, y_e = propagacao(cam_ent, cam_int, cam_final, pesos_primeira_camada, pesos_segunda_camada)

	v, w = retropropagacao(z_e, z, y, y_e, cam_ent, cam_int, cam_final)

	z_e, z, y, y_e = propagacao(cam_ent, cam_int, cam_final, v, w)

	erro[par] = 0
	cam_final.times do |k|
		erro[par]+= (saidas[par][k]-y[k])**2
	end



	end





















#DADOS#
  def entradas
  	[[0.3841,0.2021,0.0000,0.2438],
	[0.1765,0.1613,0.3401,0.0843],
	[0.3170,0.5786,0.3387,0.4192],
	[0.2467,0.0337,0.2699,0.3454],
	[0.6102,0.8192,0.4679,0.4762],
	[0.7030,0.7784,0.7482,0.6562],
	[0.4767,0.4348,0.4852,0.3640],
	[0.7589,0.8256,0.6514,0.6143],
	[0.1579,0.3641,0.2551,0.2919],
	[0.5561,0.5602,0.5605,0.2105],
	[0.3267,0.2974,0.0343,0.1466],
	[0.2303,0.0942,0.3889,0.1713],
	[0.2953,0.2963,0.2600,0.3039],
	[0.5797,0.4789,0.5780,0.3048],
	[0.5860,0.5250,0.4792,0.4021],
	[0.7045,0.6933,0.6449,0.6623],
	[0.9134,0.9412,0.6078,0.5934],
	[0.2333,0.4943,0.2525,0.2567],
	[0.2676,0.4172,0.2775,0.2721],
	[0.4850,0.5506,0.5269,0.6036],
	[0.2434,0.2567,0.2312,0.2624],
	[0.1250,0.3023,0.1826,0.3168],
	[0.5598,0.4253,0.4258,0.3192],
	[0.5738,0.7674,0.6154,0.4447],
	[0.5692,0.8368,0.5832,0.4585],
	[0.4655,0.7682,0.3221,0.2940],
	[0.5568,0.7592,0.6293,0.5453],
	[0.8842,0.7509,0.5723,0.5814],
	[0.7959,0.9243,0.7339,0.7334],
	[0.7124,0.7128,0.6065,0.6668],
	[0.6749,0.8767,0.6543,0.7461],
	[0.3674,0.4359,0.4230,0.2965],
	[0.3473,0.0754,0.2183,0.1905],
	[0.6931,0.5188,0.5386,0.5794],
	[0.6439,0.4959,0.4322,0.4582],
	[0.5627,0.4893,0.6831,0.5120],
	[0.5182,0.7553,0.6368,0.4538],
	[0.6046,0.7479,0.6542,0.4375],
	[0.6328,0.6786,0.7751,0.6183],
	[0.3429,0.4694,0.2855,0.2977],
	[0.6371,0.5069,0.5316,0.4520],
	[0.6388,0.6970,0.6407,0.7677],
	[0.3529,0.5504,0.3706,0.4828],
	[0.4302,0.3237,0.6397,0.4319],
	[0.7078,0.9604,0.7470,0.6399],
	[0.7350,0.8170,0.7227,0.6279],
	[0.7011,0.2946,0.6625,0.4312],
	[0.5961,0.3817,0.6363,0.3663],
	[0.0000,0.2563,0.2603,0.3027],
	[0.5996,0.5704,0.6965,0.6548],
	[0.4289,0.3709,0.3994,0.3656],
	[0.2093,0.3655,0.3334,0.1802],
	[0.2335,0.2856,0.3912,0.1601],
	[0.3266,0.7751,0.4356,0.3448],
	[0.2457,0.1203,0.1228,0.2206],
	[0.4656,0.4815,0.4211,0.4862],
	[0.7511,0.8868,0.5408,0.6253],
	[0.7825,0.9386,0.6510,0.6996],
	[0.3463,0.4118,0.2507,0.0454],
	[0.5172,0.1482,0.3172,0.2323],
	[0.6942,0.4516,0.5387,0.5983],
	[0.7586,0.7017,0.7120,0.7509],
	[0.6880,0.6004,0.6602,0.4320],
	[0.4742,0.5079,0.4135,0.4161],
	[0.4419,0.5761,0.4515,0.4497],
	[0.3367,0.4333,0.2336,0.1678],
	[0.4744,0.4604,0.1507,0.4873],
	[0.7510,0.4350,0.5453,0.4831],
	[0.4045,0.5636,0.2534,0.5573],
	[0.1449,0.1539,0.2446,0.0559],
	[0.3460,0.2722,0.1866,0.5049],
	[0.2241,0.2046,0.3575,0.2891],
	[0.1412,0.2264,0.4025,0.2661],
	[0.5782,0.6418,0.7212,0.6396],
	[0.9153,0.6571,0.8229,0.6689],
	[0.6014,0.7664,0.6385,0.5513],
	[0.7328,0.8708,0.8812,0.7060],
	[0.4270,0.6352,0.6811,0.3884],
	[0.6189,0.1652,0.4016,0.3042],
	[0.2143,0.3868,0.1926,0.0000],
	[0.5696,0.7238,0.7199,0.6677],
	[0.8656,0.6700,0.6570,0.6065],
	[0.9002,0.6858,0.7409,0.7047],
	[0.4167,0.5255,0.5506,0.4093],
	[0.8325,0.4804,0.7990,0.7471],
	[0.4124,0.1191,0.4720,0.3184],
	[10.000,10.000,0.7924,0.7074],
	[0.5685,0.6924,0.6180,0.5792],
	[0.6505,0.4864,0.2972,0.4599],
	[0.8124,0.7690,0.9720,10.000],
	[0.9013,0.7160,10.000,0.8046],
	[0.8872,0.7556,0.9307,0.6791],
	[0.3708,0.2139,0.2136,0.4295],
	[0.5159,0.4349,0.3715,0.4086],
	[0.6768,0.6304,0.8044,0.4885],
	[0.1664,0.2404,0.2000,0.3425],
	[0.2495,0.2807,0.4679,0.2200],
	[0.2487,0.2348,0.0913,0.1281],
	[0.5748,0.8552,0.5973,0.7317],
	[0.3858,0.7585,0.3239,0.3565],
	[0.3329,0.4946,0.5614,0.3152],
	[0.3891,0.4805,0.7598,0.4231],
	[0.2888,0.4888,0.1930,0.0177],
	[0.3827,0.4900,0.2272,0.3599],
	[0.6047,0.4224,0.6274,0.5809],
	[0.9840,0.7031,0.6469,0.4701],
	[0.6554,0.6785,0.9279,0.7723],
	[0.0466,0.3388,0.0840,0.0762],
	[0.6154,0.8196,0.6339,0.7729],
	[0.8452,0.8897,0.8383,0.6961],
	[0.6927,0.7870,0.7689,0.7213],
	[0.4032,0.6188,0.4930,0.5380],
	[0.4006,0.3094,0.3868,0.0811],
	[0.7416,0.7138,0.6823,0.6067],
	[0.7404,0.6764,0.8293,0.4694],
	[0.7736,0.7097,0.6826,0.8142],
	[0.5823,0.9635,0.3706,0.5636],
	[0.2081,0.3738,0.3119,0.3552],
	[0.5616,0.8972,0.5186,0.6650],
	[0.6594,0.8907,0.6000,0.7157],
	[0.3979,0.3070,0.3637,0.1220],
	[0.2644,0.0000,0.3572,0.1931],
	[0.4816,0.4791,0.4213,0.5889],
	[0.0848,0.0749,0.4349,0.3328],
	[0.4608,0.6775,0.3533,0.3016],
	[0.4155,0.6589,0.5310,0.5404],
	[0.3934,0.6244,0.4817,0.4324],
	[0.5843,0.8517,0.8576,0.7133],
	[0.1995,0.3690,0.3537,0.3462],
	[0.3832,0.2321,0.0341,0.2450]]
  end

	def saidas
  		[[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[1,0,0],
  		[0,1,0],
  		[0,0,1],
  		[0,1,0],
  		[0,0,1],
  		[1,0,0],
  		[0,1,0],
  		[1,0,0],
  		[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[0,1,0],
  		[0,0,1],
  		[0,0,1],
  		[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[0,0,1],
  		[0,0,1],
  		[0,1,0],
  		[0,1,0],
  		[0,0,1],
  		[0,0,1],
  		[0,0,1],
  		[0,0,1],
  		[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[0,1,0],
  		[0,1,0],
  		[0,1,0],
  		[0,1,0],
  		[0,0,1],
  		[1,0,0],
  		[0,1,0],
  		[0,0,1],
  		[0,1,0],
  		[0,1,0],
  		[0,0,1],
  		[0,0,1],
  		[0,1,0],
  		[0,1,0],
  		[1,0,0],
  		[0,0,1],
  		[0,1,0],
  		[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[1,0,0],
  		[0,1,0],
  		[0,0,1],
  		[0,0,1],
  		[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[0,0,1],
  		[0,1,0],
  		[0,1,0],
  		[0,1,0],
  		[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[0,1,0],
  		[1,0,0],
  		[1,0,0],
  		[1,0,0],
  		[1,0,0],
  		[0,0,1],
  		[0,0,1],
  		[0,0,1],
  		[0,0,1],
  		[0,1,0],
  		[1,0,0],
  		[1,0,0],
  		[0,0,1],
  		[0,0,1],
  		[0,0,1],
  		[0,1,0],
  		[0,0,1],
  		[1,0,0],
  		[0,0,1],
  		[0,1,0],
  		[0,1,0],
  		[0,0,1],
  		[0,0,1],
  		[0,0,1],
  		[1,0,0],
  		[0,1,0],
  		[0,0,1],
  		[1,0,0],
  		[1,0,0],
  		[1,0,0],
  		[0,0,1],
  		[0,1,0],
  		[0,1,0],
  		[0,1,0],
  		[1,0,0],
  		[0,1,0],
  		[0,1,0],
  		[0,0,1],
  		[0,0,1],
  		[1,0,0],
  		[0,0,1],
  		[0,0,1],
  		[0,0,1],
  		[0,1,0],
  		[1,0,0],
  		[0,0,1],
  		[0,0,1],
  		[0,0,1],
  		[0,1,0],
  		[1,0,0],
  		[0,0,1],
  		[0,0,1],
  		[1,0,0],
  		[1,0,0],
  		[0,1,0],
  		[1,0,0],
  		[0,1,0],
  		[0,1,0],
  		[0,1,0],
  		[0,0,1],
  		[1,0,0],
  		[1,0,0]]
  	end

    def pesos_segunda_camada
	  	[[0.154,0.434,-0.381],
	  	[-0.137,-0.397,-0.159],
	  	[-0.356,-0.484,0.055],
	  	[0.494,-0.054,-0.047],
	  	[0.328,0.057,-0.315],
	  	[-0.259,0.106,-0.149],
	  	[0.274,-0.001,0.441],
	  	[-0.026,0.154,-0.291],
	  	[-0.035,0.297,-0.085],
	  	[-0.013,0.203,0.140],
	  	[0.409,0.338,-0.085],
	  	[-0.119,0.040,0.454],
	  	[-0.148,0.301,-0.152],
	  	[-0.451,-0.151,-0.059],
	  	[-0.425,-0.198,-0.348],
	  	[0.242,0.363,-0.101]]
  	end

    def pesos_primeira_camada
    	[[0.386,-0.233,0.217,0.242,0.072,0.265,-0.072,-0.170,0.106,-0.115,-0.421,0.357,0.085,0.286,0.304],
    	[-0.449,-0.083,-0.034,0.462,0.295,-0.408,-0.446,-0.133,-0.458,-0.458,0.365,0.248,-0.414,-0.023,0.003],
    	[-0.428,-0.318,0.129,0.276,0.420,-0.417,-0.221,0.222,0.030,0.000,-0.003,-0.481,0.205,-0.472,0.494],
    	[0.055,-0.286,0.062,0.489,-0.047,0.347,0.244,-0.499,-0.180,0.297,-0.035,-0.030,-0.493,-0.002,0.451],
    	[0.114,0.160,0.103,-0.026,-0.067,-0.156,-0.263,-0.293,-0.246,-0.484,-0.307,-0.230,0.241,-0.358,-0.280]]
  	end

    def entradas_validacao
  		[[0.8622,0.7101,0.6236,0.7894],
  		[0.2741,0.1552,0.1333,0.1516],
  		[0.6772,0.8516,0.6543,0.7573],
  		[0.2178,0.5039,0.6415,0.5039],
  		[0.726,0.75,0.7007,0.4953],
  		[0.2473,0.2941,0.4248,0.3087],
  		[0.5682,0.5683,0.5054,0.4426],
  		[0.6566,0.6715,0.4952,0.3951],
  		[0.0705,0.4717,0.2921,0.2954],
  		[0.1187,0.2568,0.314,0.3037],
  		[0.5673,0.7011,0.4083,0.5552],
  		[0.3164,0.2251,0.3526,0.256],
  		[0.7884,0.9568,0.6825,0.6398],
  		[0.9633,0.785,0.6777,0.6059],
  		[0.7739,0.8505,0.7934,0.6626],
  		[0.4219,0.4136,0.1408,0.094],
  		[0.6616,0.4365,0.6597,0.8129],
  		[0.7325,0.4761,0.3888,0.5683]]
  	end

	def saidas_validacao
  		[[0,0,1],
		[1,0,0],
		[0,0,1],
		[0,1,0],
		[0,0,1],
		[1,0,0],
		[0,1,0],
		[0,1,0],
		[1,0,0],
		[1,0,0],
		[0,1,0],
		[1,0,0],
		[0,0,1],
		[0,0,1],
		[0,0,1],
		[1,0,0],
		[0,0,1],
		[0,1,0]]
	end
end
